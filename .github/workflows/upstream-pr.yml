name: Create Upstream PR

on:
  workflow_run:
    workflows: ["publish docker image"]
    types:
      - completed
    branches: [working]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  create-upstream-pr:
    runs-on: ubuntu-latest
    concurrency:
      group: upstream-pr-${{ github.ref }}
      cancel-in-progress: true
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/TandoorRecipes/recipes.git
          git fetch upstream

      - name: Rebase on upstream
        run: |
          echo "Rebasing working branch on upstream/tandoor-1..."
          git rebase upstream/tandoor-1
          if [ $? -ne 0 ]; then
            echo "❌ Rebase conflicts detected - manual intervention required"
            git rebase --abort
            exit 1
          fi
          echo "✅ Rebase successful"

      - name: Get last upstream PR commit
        id: last_commit
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Look for the last PR we created to upstream
              const prs = await github.rest.pulls.list({
                owner: 'TandoorRecipes',
                repo: 'recipes',
                head: `${context.repo.owner}:upstream-pr-`,
                state: 'all',
                sort: 'created',
                direction: 'desc',
                per_page: 1
              });

              if (prs.data.length > 0) {
                const lastPR = prs.data[0];
                console.log(`Found last upstream PR: #${lastPR.number}`);

                // Get the commits from that PR
                const commits = await github.rest.pulls.listCommits({
                  owner: 'TandoorRecipes',
                  repo: 'recipes',
                  pull_number: lastPR.number
                });

                if (commits.data.length > 0) {
                  const lastCommitSha = commits.data[commits.data.length - 1].sha;
                  console.log(`Last processed commit: ${lastCommitSha}`);
                  return lastCommitSha;
                }
              }

              console.log('No previous upstream PR found, will include recent commits');
              return null;
            } catch (error) {
              console.log('Error finding last PR, will include recent commits:', error.message);
              return null;
            }

      - name: Get new commits since last upstream PR
        id: commits
        run: |
          LAST_COMMIT="${{ steps.last_commit.outputs.result }}"
          if [ "$LAST_COMMIT" != "null" ] && [ -n "$LAST_COMMIT" ]; then
            # Remove quotes from the commit SHA
            LAST_COMMIT=$(echo $LAST_COMMIT | tr -d '"')
            echo "Getting commits since: $LAST_COMMIT"
            COMMITS=$(git log ${LAST_COMMIT}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            # If no previous commit found, get last 10 commits
            echo "No previous upstream PR found, getting recent commits"
            COMMITS=$(git log -10 --pretty=format:"- %s (%h)" --no-merges)
          fi

          if [ -z "$COMMITS" ]; then
            echo "No new commits since last upstream PR - exiting"
            exit 0
          fi

          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get trigger PR info
        id: trigger_pr
        uses: actions/github-script@v7
        if: github.event_name == 'workflow_run'
        with:
          script: |
            // Get the triggering workflow run
            const triggerRun = github.event.workflow_run;

            // Find associated PR
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: triggerRun.head_sha
            });

            const pr = prs.data.find(pr => pr.state === 'open' || pr.merged_at);

            if (pr) {
              console.log(`Found PR: ${pr.title}`);
              return {
                title: pr.title,
                number: pr.number
              };
            }

            // Fallback to commit message
            const commit = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: triggerRun.head_sha
            });

            return {
              title: commit.data.commit.message.split('\n')[0],
              number: null
            };

      - name: Create clean branch for PR
        run: |
          # Create new branch from current working branch
          git checkout -b upstream-pr-$(date +%Y%m%d-%H%M%S)

          # Remove gitattributes and restore upstream workflows and version file for PR
          git rm .gitattributes || true
          git checkout upstream/tandoor-1 -- .github/workflows/ || true
          git checkout upstream/tandoor-1 -- cookbook/version_info.py || true

          # Stage the changes
          git add . || true

          # Commit if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "Restore upstream workflows, version file, and remove fork-specific .gitattributes for PR"
          fi

      - name: Push branch to fork
        run: |
          BRANCH_NAME=$(git branch --show-current)
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        id: create_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = await exec.getExecOutput('git', ['branch', '--show-current']);
            const currentBranch = branchName.stdout.trim();

            // Use trigger PR title or fallback
            const prTitle = ${{ github.event_name == 'workflow_run' && steps.trigger_pr.outputs.result && fromJSON(steps.trigger_pr.outputs.result).title }} ||
                           'Sync changes from fork';

            // Build PR body
            const commits = `${{ steps.commits.outputs.COMMITS }}`;
            const prBody = ${{ github.event_name == 'workflow_run' }} ?
              `**Automated PR from successful Docker publish**

              This PR was automatically created after a successful Docker image publish.

              **Recent commits:**
              ${commits}

              **Source:** ${context.repo.owner}/${context.repo.repo}:${currentBranch}
              **Excludes:** Custom workflows and .gitattributes (preserved upstream versions)` :
              `**Manual PR creation**

              **Recent commits:**
              ${commits}

              **Source:** ${context.repo.owner}/${context.repo.repo}:${currentBranch}
              **Excludes:** Custom workflows and .gitattributes`;

            const pr = await github.rest.pulls.create({
              owner: 'TandoorRecipes',
              repo: 'recipes',
              title: prTitle,
              body: prBody,
              head: '${context.repo.owner}:' + currentBranch,
              base: 'tandoor-1'
            });

            console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);
            return {
              pr_number: pr.data.number,
              pr_url: pr.data.html_url
            };

      - name: Comment on success
        if: success()
        run: |
          echo "✅ Successfully created upstream PR!"