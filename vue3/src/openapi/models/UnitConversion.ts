/* tslint:disable */
/* eslint-disable */
/**
 * Tandoor
 * Tandoor API Docs
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Unit } from './Unit';
import {
    UnitFromJSON,
    UnitFromJSONTyped,
    UnitToJSON,
} from './Unit';
import type { Food } from './Food';
import {
    FoodFromJSON,
    FoodFromJSONTyped,
    FoodToJSON,
} from './Food';

/**
 * Adds nested create feature
 * @export
 * @interface UnitConversion
 */
export interface UnitConversion {
    /**
     * 
     * @type {number}
     * @memberof UnitConversion
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UnitConversion
     */
    readonly name: string;
    /**
     * 
     * @type {number}
     * @memberof UnitConversion
     */
    baseAmount: number;
    /**
     * 
     * @type {Unit}
     * @memberof UnitConversion
     */
    baseUnit: Unit;
    /**
     * 
     * @type {number}
     * @memberof UnitConversion
     */
    convertedAmount: number;
    /**
     * 
     * @type {Unit}
     * @memberof UnitConversion
     */
    convertedUnit: Unit;
    /**
     * 
     * @type {Food}
     * @memberof UnitConversion
     */
    food?: Food;
    /**
     * 
     * @type {string}
     * @memberof UnitConversion
     */
    openDataSlug?: string;
}

/**
 * Check if a given object implements the UnitConversion interface.
 */
export function instanceOfUnitConversion(value: object): value is UnitConversion {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('baseAmount' in value) || value['baseAmount'] === undefined) return false;
    if (!('baseUnit' in value) || value['baseUnit'] === undefined) return false;
    if (!('convertedAmount' in value) || value['convertedAmount'] === undefined) return false;
    if (!('convertedUnit' in value) || value['convertedUnit'] === undefined) return false;
    return true;
}

export function UnitConversionFromJSON(json: any): UnitConversion {
    return UnitConversionFromJSONTyped(json, false);
}

export function UnitConversionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UnitConversion {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'],
        'baseAmount': json['base_amount'],
        'baseUnit': UnitFromJSON(json['base_unit']),
        'convertedAmount': json['converted_amount'],
        'convertedUnit': UnitFromJSON(json['converted_unit']),
        'food': json['food'] == null ? undefined : FoodFromJSON(json['food']),
        'openDataSlug': json['open_data_slug'] == null ? undefined : json['open_data_slug'],
    };
}

export function UnitConversionToJSON(value?: Omit<UnitConversion, 'name'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'base_amount': value['baseAmount'],
        'base_unit': UnitToJSON(value['baseUnit']),
        'converted_amount': value['convertedAmount'],
        'converted_unit': UnitToJSON(value['convertedUnit']),
        'food': FoodToJSON(value['food']),
        'open_data_slug': value['openDataSlug'],
    };
}

