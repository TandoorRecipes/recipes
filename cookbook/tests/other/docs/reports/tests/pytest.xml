<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="4" failures="0" skipped="0" tests="4" time="34.750" timestamp="2025-07-17T12:15:15.274960+02:00" hostname="DESKTOP-RM10LP5"><testcase classname="cookbook.tests.other.test_automations" name="test_never_unit_automation[arg0]" time="22.035"><error message="failed on setup with &quot;TypeError: type 'Factory' is not subscriptable&quot;">args = ()
kwargs = {'request': &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg0]&gt;&gt;}
k = 'space_1__name'

    @functools.wraps(fixture_function)
    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:
        for k in set(kwargs.keys()) - function_args:
            del kwargs[k]
&gt;       return fixture_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:49: in fn
    return function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg0]&gt;&gt;
factory_name = 'space_factory'

    def model_fixture(request: SubRequest, factory_name: str) -&gt; object:
        """Model fixture implementation."""
        factoryboy_request: FactoryboyRequest = request.getfixturevalue("factoryboy_request")
    
        # Try to evaluate as much post-generation dependencies as possible
        factoryboy_request.evaluate(request)
    
        assert request.fixturename  # NOTE: satisfy mypy
        fixture_name = request.fixturename
        prefix = "".join((fixture_name, SEPARATOR))
    
        factory_class: type[Factory[object]] = request.getfixturevalue(factory_name)
    
        # Create model fixture instance
&gt;       NewFactory: type[Factory[object]] = cast(type[Factory[object]], type("Factory", (factory_class,), {}))
                                                      ^^^^^^^^^^^^^^^
E       TypeError: type 'Factory' is not subscriptable

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixture.py:360: TypeError</error></testcase><testcase classname="cookbook.tests.other.test_automations" name="test_never_unit_automation[arg2]" time="22.047"><error message="failed on setup with &quot;TypeError: type 'Factory' is not subscriptable&quot;">args = ()
kwargs = {'request': &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg2]&gt;&gt;}
k = 'space_1__name'

    @functools.wraps(fixture_function)
    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:
        for k in set(kwargs.keys()) - function_args:
            del kwargs[k]
&gt;       return fixture_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:49: in fn
    return function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg2]&gt;&gt;
factory_name = 'space_factory'

    def model_fixture(request: SubRequest, factory_name: str) -&gt; object:
        """Model fixture implementation."""
        factoryboy_request: FactoryboyRequest = request.getfixturevalue("factoryboy_request")
    
        # Try to evaluate as much post-generation dependencies as possible
        factoryboy_request.evaluate(request)
    
        assert request.fixturename  # NOTE: satisfy mypy
        fixture_name = request.fixturename
        prefix = "".join((fixture_name, SEPARATOR))
    
        factory_class: type[Factory[object]] = request.getfixturevalue(factory_name)
    
        # Create model fixture instance
&gt;       NewFactory: type[Factory[object]] = cast(type[Factory[object]], type("Factory", (factory_class,), {}))
                                                      ^^^^^^^^^^^^^^^
E       TypeError: type 'Factory' is not subscriptable

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixture.py:360: TypeError</error></testcase><testcase classname="cookbook.tests.other.test_automations" name="test_never_unit_automation[arg3]" time="22.106"><error message="failed on setup with &quot;TypeError: type 'Factory' is not subscriptable&quot;">args = ()
kwargs = {'request': &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg3]&gt;&gt;}
k = 'space_1__name'

    @functools.wraps(fixture_function)
    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:
        for k in set(kwargs.keys()) - function_args:
            del kwargs[k]
&gt;       return fixture_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:49: in fn
    return function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg3]&gt;&gt;
factory_name = 'space_factory'

    def model_fixture(request: SubRequest, factory_name: str) -&gt; object:
        """Model fixture implementation."""
        factoryboy_request: FactoryboyRequest = request.getfixturevalue("factoryboy_request")
    
        # Try to evaluate as much post-generation dependencies as possible
        factoryboy_request.evaluate(request)
    
        assert request.fixturename  # NOTE: satisfy mypy
        fixture_name = request.fixturename
        prefix = "".join((fixture_name, SEPARATOR))
    
        factory_class: type[Factory[object]] = request.getfixturevalue(factory_name)
    
        # Create model fixture instance
&gt;       NewFactory: type[Factory[object]] = cast(type[Factory[object]], type("Factory", (factory_class,), {}))
                                                      ^^^^^^^^^^^^^^^
E       TypeError: type 'Factory' is not subscriptable

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixture.py:360: TypeError</error></testcase><testcase classname="cookbook.tests.other.test_automations" name="test_never_unit_automation[arg1]" time="22.143"><error message="failed on setup with &quot;TypeError: type 'Factory' is not subscriptable&quot;">args = ()
kwargs = {'request': &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg1]&gt;&gt;}
k = 'space_1__name'

    @functools.wraps(fixture_function)
    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:
        for k in set(kwargs.keys()) - function_args:
            del kwargs[k]
&gt;       return fixture_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixturegen.py:49: in fn
    return function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = &lt;SubRequest 'space_1' for &lt;Function test_never_unit_automation[arg1]&gt;&gt;
factory_name = 'space_factory'

    def model_fixture(request: SubRequest, factory_name: str) -&gt; object:
        """Model fixture implementation."""
        factoryboy_request: FactoryboyRequest = request.getfixturevalue("factoryboy_request")
    
        # Try to evaluate as much post-generation dependencies as possible
        factoryboy_request.evaluate(request)
    
        assert request.fixturename  # NOTE: satisfy mypy
        fixture_name = request.fixturename
        prefix = "".join((fixture_name, SEPARATOR))
    
        factory_class: type[Factory[object]] = request.getfixturevalue(factory_name)
    
        # Create model fixture instance
&gt;       NewFactory: type[Factory[object]] = cast(type[Factory[object]], type("Factory", (factory_class,), {}))
                                                      ^^^^^^^^^^^^^^^
E       TypeError: type 'Factory' is not subscriptable

..\..\..\venv\Lib\site-packages\pytest_factoryboy\fixture.py:360: TypeError</error></testcase></testsuite></testsuites>